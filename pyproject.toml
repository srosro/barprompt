[tool.poetry]
name = "barprompt"
version = "0.1.0"
description = "A simple tool to test and compare prompts."
authors = ["Deep Parikh <deepparikhsd@gmail.com>"]
readme = "README.md"
packages = [{include = "../barprompt"}]

[tool.poetry.dependencies]
python = "^3.12"
promptfoo = "^0.1.0"
langfuse = "^2.60.2"
pyyaml = "^6.0.2"
python-dotenv = "^1.1.0"
openai = "^1.72.0"
pandas = "^2.2.3"
pytz = "^2025.2"

[tool.poetry.scripts]
barprompt = "barprompt:main"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
mypy = "^1.15.0"
black = "^25.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
# Enable autofix behavior
fix = true
# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# A list of rule codes or prefixes to enable
# F: pyflakes, E/W: pycodestyle, I: isort, N: pep8-naming, UP: pyupgrade,
# B: flake8-bugbear, C4: flake8-comprehensions, SIM: flake8-simplify,
# RUF: Ruff-specific rules, RET: return statements, ERA: commented-out code,
# PLC: pylint conventions, PLE: pylint errors, PLW: pylint warnings,
# F401: unused imports, F841: unused variables (like autoflake)
select = ["ALL"]
ignore = [
    "T201",  # Allow print statements since this is a CLI application
    "E501",  # Allow lines longer than 88 characters in some cases
]

# Configure flake8-style error for unused imports and variables (autoflake functionality)
[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files

# Format code according to the Black code style (implicit when using ruff-format)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

# Configure isort settings
[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["barprompt"]
lines-between-types = 1
order-by-type = true

# Configure McCabe complexity checker
[tool.ruff.lint.mccabe]
max-complexity = 10

# pydocstyle settings
[tool.ruff.lint.pydocstyle]
convention = "google"

# mypy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
# Stricter options
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
strict_equality = true
implicit_reexport = false  # No longer implicitly re-export imported names

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
